// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CarshareToken.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CarshareToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bleServiceUuid: String = String()

  var reservationPrivateKey: String = String()

  var reservationModulusHash: Data = SwiftProtobuf.Internal.emptyData

  var tenantModulusHash: Data = SwiftProtobuf.Internal.emptyData

  var reservationToken: Data = SwiftProtobuf.Internal.emptyData

  var reservationTokenSignature: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CarshareToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CarshareToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ble_service_uuid"),
    2: .standard(proto: "reservation_private_key"),
    3: .standard(proto: "reservation_modulus_hash"),
    4: .standard(proto: "tenant_modulus_hash"),
    5: .standard(proto: "reservation_token"),
    6: .standard(proto: "reservation_token_signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bleServiceUuid)
      case 2: try decoder.decodeSingularStringField(value: &self.reservationPrivateKey)
      case 3: try decoder.decodeSingularBytesField(value: &self.reservationModulusHash)
      case 4: try decoder.decodeSingularBytesField(value: &self.tenantModulusHash)
      case 5: try decoder.decodeSingularBytesField(value: &self.reservationToken)
      case 6: try decoder.decodeSingularBytesField(value: &self.reservationTokenSignature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bleServiceUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.bleServiceUuid, fieldNumber: 1)
    }
    if !self.reservationPrivateKey.isEmpty {
      try visitor.visitSingularStringField(value: self.reservationPrivateKey, fieldNumber: 2)
    }
    if !self.reservationModulusHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.reservationModulusHash, fieldNumber: 3)
    }
    if !self.tenantModulusHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.tenantModulusHash, fieldNumber: 4)
    }
    if !self.reservationToken.isEmpty {
      try visitor.visitSingularBytesField(value: self.reservationToken, fieldNumber: 5)
    }
    if !self.reservationTokenSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.reservationTokenSignature, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CarshareToken, rhs: CarshareToken) -> Bool {
    if lhs.bleServiceUuid != rhs.bleServiceUuid {return false}
    if lhs.reservationPrivateKey != rhs.reservationPrivateKey {return false}
    if lhs.reservationModulusHash != rhs.reservationModulusHash {return false}
    if lhs.tenantModulusHash != rhs.tenantModulusHash {return false}
    if lhs.reservationToken != rhs.reservationToken {return false}
    if lhs.reservationTokenSignature != rhs.reservationTokenSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
