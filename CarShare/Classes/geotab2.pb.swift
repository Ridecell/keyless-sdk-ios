// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geotab2.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Command: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unlock // = 0
  case lock // = 1
  case locate // = 2
  case checkin // = 3
  case checkout // = 4

  init() {
    self = .unlock
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unlock
    case 1: self = .lock
    case 2: self = .locate
    case 3: self = .checkin
    case 4: self = .checkout
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unlock: return 0
    case .lock: return 1
    case .locate: return 2
    case .checkin: return 3
    case .checkout: return 4
    }
  }

}

#if swift(>=4.2)

extension Command: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// For communication from Car Share framework to Go devices
struct CommandMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: Command {
    get {return _command ?? .unlock}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  mutating func clearCommand() {self._command = nil}

  var reservationToken: String {
    get {return _reservationToken ?? String()}
    set {_reservationToken = newValue}
  }
  /// Returns true if `reservationToken` has been explicitly set.
  var hasReservationToken: Bool {return self._reservationToken != nil}
  /// Clears the value of `reservationToken`. Subsequent reads from it will return its default value.
  mutating func clearReservationToken() {self._reservationToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _command: Command? = nil
  fileprivate var _reservationToken: String? = nil
}

/// Challenge from Go device to Client App to Car Share framework made of random bytes that are to be signed by private key
struct ChallengeMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var challenge: Data {
    get {return _challenge ?? SwiftProtobuf.Internal.emptyData}
    set {_challenge = newValue}
  }
  /// Returns true if `challenge` has been explicitly set.
  var hasChallenge: Bool {return self._challenge != nil}
  /// Clears the value of `challenge`. Subsequent reads from it will return its default value.
  mutating func clearChallenge() {self._challenge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _challenge: Data? = nil
}

/// Response from Car Share framework to Go devices that is the bytes from the challenge signed with the private key
struct ResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: Data {
    get {return _response ?? SwiftProtobuf.Internal.emptyData}
    set {_response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return self._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {self._response = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _response: Data? = nil
}

/// returned after challenge / response is complete
struct ResultMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var error: String {
    get {return _error ?? String()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _error: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Command: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNLOCK"),
    1: .same(proto: "LOCK"),
    2: .same(proto: "LOCATE"),
    3: .same(proto: "CHECKIN"),
    4: .same(proto: "CHECKOUT"),
  ]
}

extension CommandMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CommandMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "reservationToken"),
  ]

  public var isInitialized: Bool {
    if self._command == nil {return false}
    if self._reservationToken == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._command)
      case 2: try decoder.decodeSingularStringField(value: &self._reservationToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._command {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._reservationToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommandMessage, rhs: CommandMessage) -> Bool {
    if lhs._command != rhs._command {return false}
    if lhs._reservationToken != rhs._reservationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChallengeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChallengeMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
  ]

  public var isInitialized: Bool {
    if self._challenge == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._challenge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._challenge {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChallengeMessage, rhs: ChallengeMessage) -> Bool {
    if lhs._challenge != rhs._challenge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResponseMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ResponseMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
  ]

  public var isInitialized: Bool {
    if self._response == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._response)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._response {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ResponseMessage, rhs: ResponseMessage) -> Bool {
    if lhs._response != rhs._response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ResultMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ResultMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "error"),
  ]

  public var isInitialized: Bool {
    if self._success == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._success)
      case 2: try decoder.decodeSingularStringField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._error {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ResultMessage, rhs: ResultMessage) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
